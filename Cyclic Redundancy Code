1. Implementing CRC
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void division(int temp[], int gen[], int n, int r) {
    for (int i = 0; i < n; i++) {
        if (gen[0] == temp[i]) {
            for (int j = 0, k = i; j < r + 1; j++, k++) {
                temp[k] = temp[k] ^ gen[j];
            }
        }
    }
}

void introduceError(int message[], int length) {
    // Randomly flip one bit in the message
    int errorPosition = rand() % length; // Random position to introduce an error
    message[errorPosition] = message[errorPosition] ^ 1; // Flip the bit
}

int main() {
    int n, r, message[50], gen[50], temp[50];

    // Seed the random number generator
    srand(time(NULL));

    printf("Enter the number of frame bits: ");
    scanf("%d", &n);

    printf("Enter the frame: ");
    for (int i = 0; i < n; i++)
        scanf("%d", &message[i]);

    printf("Enter the number of generator bits: ");
    scanf("%d", &r);

    printf("Enter the generator: ");
    for (int i = 0; i < r; i++)
        scanf("%d", &gen[i]);

    r--; // Adjust r to be the degree of the generator polynomial
    // Append r zeros to the message
    for (int i = 0; i < r; i++)
        message[n + i] = 0;

    // Prepare temp array with the message
    for (int i = 0; i < n + r; i++)
        temp[i] = message[i];

    // Print the message with appended zeros
    printf("Message with appended zeros: ");
    for (int i = 0; i < n + r; i++)
        printf("%d ", temp[i]);
    printf("\n");

    // Perform division to calculate the CRC
    division(temp, gen, n, r);

    // Print the calculated CRC
    printf("CRC: ");
    for (int i = 0; i < r; i++) {
        printf("%d ", temp[n + i]);
        message[n + i] = temp[n + i]; // Append CRC to the message
    }

    // Print the transmitted message
    printf("\nTransmitted Message: ");
    for (int i = 0; i < n + r; i++)
        printf("%d ", message[i]);

    // Option to introduce an error
    char simulateError;
    printf("\nDo you want to simulate an error in the transmitted message? (y/n): ");
    scanf(" %c", &simulateError);

    if (simulateError == 'y' || simulateError == 'Y') {
        introduceError(message, n + r); // Flip a random bit to simulate error
        printf("\nReceived Message (with error): ");
        for (int i = 0; i < n + r; i++)
            printf("%d ", message[i]);
    } else {
        printf("\nReceived Message (no error): ");
        for (int i = 0; i < n + r; i++)
            printf("%d ", message[i]);
    }

    // Decoding
    printf("\nDecoding: ");
    for (int i = 0; i < n + r; i++)
        temp[i] = message[i];

    // Check for errors using the division function
    division(temp, gen, n, r);
    for (int i = 0; i < r; i++) {
        if (temp[n + i]) {
            printf("Error detected in received message.\n");
            return 0;
        }
    }

    printf("\nNo error in received Message.");
    printf("\nAfter decoding, CRC is: ");
    for (int i = 0; i < r; i++) {
        printf("%d ", temp[n + i]);
    }

    // Print the received message
    printf("\nReceived Message: ");
    for (int i = 0; i < n; i++)
        printf("%d ", message[i]);

    return 0;
}
